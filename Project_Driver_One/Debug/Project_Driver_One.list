
Project_Driver_One.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104d8  2**0
                  CONTENTS
 10 .bss          0000002c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000e1f  00000000  00000000  0001054b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000042a  00000000  00000000  0001136a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00011798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000be  00000000  00000000  000118b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000011e0  00000000  00000000  0001196e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000112d  00000000  00000000  00012b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005da7  00000000  00000000  00013c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000358  00000000  00000000  00019a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00019d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b8 	.word	0x080004b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004b8 	.word	0x080004b8

080001c8 <NVIC_GetActive>:
		}
	else{

		}
}
uint_32 NVIC_GetActive(IRQn_Type IRQn){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	if((uint_32)IRQn >= 0){
	return((NVIC->IABR[((uint_32)IRQn) >> 5] &(1UL << ((uint_32)IRQn) & 0x1F))) != ((uint_32)0) ? 1UL: 0UL; //[] for choosing the register number and =() for choosing the number of bits.
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <NVIC_GetActive+0x40>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	3380      	adds	r3, #128	; 0x80
 80001dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	4013      	ands	r3, r2
 80001ec:	f003 031f 	and.w	r3, r3, #31
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <NVIC_GetActive+0x30>
 80001f4:	2301      	movs	r3, #1
 80001f6:	e000      	b.n	80001fa <NVIC_GetActive+0x32>
 80001f8:	2300      	movs	r3, #0
	}
	else{
		return 0UL;
	}
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e100 	.word	0xe000e100

0800020c <Systick_Init>:
#include "CortexM/CortexM4_Core_SYSTICK.h"

static ptrFunction Systick_CallBack = NULL;
static volatile uint_8 Systick_Mode = 0;

uint_8 Systick_Init(uint_32 Systick_Ticks){
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	uint_8 RetVal = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

	if (Systick_Ticks > SYSTICK_LOAD_RELOAD_MSK){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800021e:	d302      	bcc.n	8000226 <Systick_Init+0x1a>
		RetVal = 1;
 8000220:	2301      	movs	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
 8000224:	e017      	b.n	8000256 <Systick_Init+0x4a>
	}
	else{
	CLEAR_BIT(SYSTICK->CTRL,SYSTICK_CTRL_ENABLE_MSK);
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <Systick_Init+0x58>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <Systick_Init+0x58>)
 800022c:	f023 0301 	bic.w	r3, r3, #1
 8000230:	6013      	str	r3, [r2, #0]
	SYSTICK->LOAD = Systick_Ticks;
 8000232:	4a0c      	ldr	r2, [pc, #48]	; (8000264 <Systick_Init+0x58>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	6053      	str	r3, [r2, #4]
	SYSTICK->VAL = 0;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <Systick_Init+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_CLOCK_SOURCE_DIV_8)
	CLEAR_BIT(SYSTICK->CTRL,SYSTICK_CTRL_CLKSOURCE_MSK);
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <Systick_Init+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a08      	ldr	r2, [pc, #32]	; (8000264 <Systick_Init+0x58>)
 8000244:	f023 0304 	bic.w	r3, r3, #4
 8000248:	6013      	str	r3, [r2, #0]
	SET_BIT(SYSTICK->CTRL,SYSTICK_CTRL_CLKSOURCE_MSK);
#else
#error "Invalid Clock Source"

#endif
	CLEAR_BIT(SYSTICK->CTRL,SYSTICK_CTRL_TICKINT_MSK);
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <Systick_Init+0x58>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a05      	ldr	r2, [pc, #20]	; (8000264 <Systick_Init+0x58>)
 8000250:	f023 0302 	bic.w	r3, r3, #2
 8000254:	6013      	str	r3, [r2, #0]
	}
return RetVal;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000e010 	.word	0xe000e010

08000268 <Systick_DeInit>:

void Systick_DeInit(void){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	CLEAR_BIT(SYSTICK->CTRL,SYSTICK_CTRL_ENABLE_MSK);
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <Systick_DeInit+0x34>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <Systick_DeInit+0x34>)
 8000272:	f023 0301 	bic.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
	SYSTICK->LOAD = 0;
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <Systick_DeInit+0x34>)
 800027a:	2200      	movs	r2, #0
 800027c:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <Systick_DeInit+0x34>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(SYSTICK->CTRL,SYSTICK_CTRL_TICKINT_MSK);
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <Systick_DeInit+0x34>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <Systick_DeInit+0x34>)
 800028a:	f023 0302 	bic.w	r3, r3, #2
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010

080002a0 <Systick_WaitBlocking>:

void Systick_WaitBlocking(uint_32 Systick_Ticks){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	SYSTICK->LOAD = Systick_Ticks;
 80002a8:	4a10      	ldr	r2, [pc, #64]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6053      	str	r3, [r2, #4]
	SET_BIT(SYSTICK->CTRL,SYSTICK_CTRL_ENABLE_MSK);
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]
	while(READ_BIT(SYSTICK->CTRL, SYSTICK_CTRL_COUNTFLAG_MSK) == 0);
 80002ba:	bf00      	nop
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <Systick_WaitBlocking+0x1c>
    CLEAR_BIT(SYSTICK->CTRL,SYSTICK_CTRL_ENABLE_MSK);
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a07      	ldr	r2, [pc, #28]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
	SYSTICK->LOAD = 0;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <Systick_WaitBlocking+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000e010 	.word	0xe000e010

080002f0 <Systick_SingleInterval>:

void Systick_SingleInterval(uint_32 Systick_Ticks, ptrFunction *CallBack){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	if(CallBack != NULL){
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d014      	beq.n	800032a <Systick_SingleInterval+0x3a>
		SYSTICK->LOAD = Systick_Ticks;
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <Systick_SingleInterval+0x48>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6053      	str	r3, [r2, #4]
		Systick_CallBack = CallBack;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	4a0c      	ldr	r2, [pc, #48]	; (800033c <Systick_SingleInterval+0x4c>)
 800030a:	6013      	str	r3, [r2, #0]
		Systick_Mode = SYSTICK_SINGLEINTERVAL_MODE;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <Systick_SingleInterval+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		SET_BIT(SYSTICK->CTRL,SYSTICK_CTRL_TICKINT_MSK);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <Systick_SingleInterval+0x48>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <Systick_SingleInterval+0x48>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	6013      	str	r3, [r2, #0]

		SET_BIT(SYSTICK->CTRL,SYSTICK_CTRL_ENABLE_MSK);
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <Systick_SingleInterval+0x48>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <Systick_SingleInterval+0x48>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
		}
	else{
	   	/*Nothing*/
	}
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e010 	.word	0xe000e010
 800033c:	2000001c 	.word	0x2000001c
 8000340:	20000020 	.word	0x20000020

08000344 <SysTick_Handler>:
	uint_32 Elapsed_Ticks = 0;
	Elapsed_Ticks = SYSTICK->LOAD - SYSTICK->VAL;
	return Elapsed_Ticks;
}

void SysTick_Handler(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	if(Systick_Mode == SYSTICK_SINGLEINTERVAL_MODE){
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <SysTick_Handler+0x24>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d101      	bne.n	8000356 <SysTick_Handler+0x12>
		Systick_DeInit();
 8000352:	f7ff ff89 	bl	8000268 <Systick_DeInit>
	}
	if(Systick_CallBack){
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Handler+0x28>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d002      	beq.n	8000364 <SysTick_Handler+0x20>
		Systick_CallBack();
 800035e:	4b03      	ldr	r3, [pc, #12]	; (800036c <SysTick_Handler+0x28>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4798      	blx	r3
	}

}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000020 	.word	0x20000020
 800036c:	2000001c 	.word	0x2000001c

08000370 <SystickFunc_1>:
static uint_32 PriorityGroupingValue = 0;
uint_8 RetVal = 0;
uint_32 MainCounter = 0;


void SystickFunc_1(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <main>:

int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

// Test Systick Driver
	RetVal = Systick_Init(1000000);
 8000384:	4809      	ldr	r0, [pc, #36]	; (80003ac <main+0x2c>)
 8000386:	f7ff ff41 	bl	800020c <Systick_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	461a      	mov	r2, r3
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <main+0x30>)
 8000390:	701a      	strb	r2, [r3, #0]

	while(1){
		Systick_WaitBlocking(1000000); // works as delay 1 micro_seconds
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <main+0x2c>)
 8000394:	f7ff ff84 	bl	80002a0 <Systick_WaitBlocking>
		Systick_SingleInterval(1000000, SystickFunc_1);
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <main+0x34>)
 800039a:	4804      	ldr	r0, [pc, #16]	; (80003ac <main+0x2c>)
 800039c:	f7ff ffa8 	bl	80002f0 <Systick_SingleInterval>
		MainCounter++;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <main+0x38>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <main+0x38>)
 80003a8:	6013      	str	r3, [r2, #0]
		Systick_WaitBlocking(1000000); // works as delay 1 micro_seconds
 80003aa:	e7f2      	b.n	8000392 <main+0x12>
 80003ac:	000f4240 	.word	0x000f4240
 80003b0:	20000026 	.word	0x20000026
 80003b4:	08000371 	.word	0x08000371
 80003b8:	20000028 	.word	0x20000028

080003bc <USART3_IRQHandler>:
	NVIC_SetPendingIRQ(RTC_Alarm_IRQn);

	/* Loop forever */
	for(;;);
}
void USART3_IRQHandler(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	USART3_IRQ_Flage = 1;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <USART3_IRQHandler+0x1c>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
	USART3_IRQ_Active_Flage = NVIC_GetActive(USART3_IRQn);
 80003c6:	2027      	movs	r0, #39	; 0x27
 80003c8:	f7ff fefe 	bl	80001c8 <NVIC_GetActive>
 80003cc:	4603      	mov	r3, r0
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <USART3_IRQHandler+0x20>)
 80003d2:	701a      	strb	r2, [r3, #0]
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000021 	.word	0x20000021
 80003dc:	20000024 	.word	0x20000024

080003e0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	EXTI15_10_IRQn_Flage = 1;
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <EXTI15_10_IRQHandler+0x1c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
	EXTI15_10_IRQ_Active_Flage = NVIC_GetActive(EXTI15_10_IRQn);
 80003ea:	2028      	movs	r0, #40	; 0x28
 80003ec:	f7ff feec 	bl	80001c8 <NVIC_GetActive>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <EXTI15_10_IRQHandler+0x20>)
 80003f6:	701a      	strb	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000022 	.word	0x20000022
 8000400:	20000025 	.word	0x20000025

08000404 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	RTC_Alarm_IRQn_Flage = 1;
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <RTC_Alarm_IRQHandler+0x14>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	20000023 	.word	0x20000023

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000420:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000426:	490d      	ldr	r1, [pc, #52]	; (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <LoopForever+0xe>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043a:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800043c:	4c0a      	ldr	r4, [pc, #40]	; (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 f811 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff ff97 	bl	8000380 <main>

08000452 <LoopForever>:

LoopForever:
  b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000460:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 8000464:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000468:	2000002c 	.word	0x2000002c

0800046c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	; (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	; (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	; (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 f818 	bl	80004b8 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004d0 	.word	0x080004d0
 80004ac:	080004d0 	.word	0x080004d0
 80004b0:	080004d0 	.word	0x080004d0
 80004b4:	080004d4 	.word	0x080004d4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
